# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import courses_types_pb2 as courses__types__pb2


class CourseServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListCourseTopics = channel.unary_unary(
                '/CourseService/ListCourseTopics',
                request_serializer=courses__types__pb2.ListCourseTopicsRequest.SerializeToString,
                response_deserializer=courses__types__pb2.ListCourseTopicsResponse.FromString,
                )
        self.GetCourseTopic = channel.unary_unary(
                '/CourseService/GetCourseTopic',
                request_serializer=courses__types__pb2.GetCourseTopicRequest.SerializeToString,
                response_deserializer=courses__types__pb2.CourseTopic.FromString,
                )
        self.CreateCourseTopic = channel.unary_unary(
                '/CourseService/CreateCourseTopic',
                request_serializer=courses__types__pb2.CreateCourseTopicRequest.SerializeToString,
                response_deserializer=courses__types__pb2.CourseTopic.FromString,
                )
        self.UpdateCourseTopic = channel.unary_unary(
                '/CourseService/UpdateCourseTopic',
                request_serializer=courses__types__pb2.UpdateCourseTopicRequest.SerializeToString,
                response_deserializer=courses__types__pb2.CourseTopic.FromString,
                )


class CourseServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListCourseTopics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCourseTopic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCourseTopic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCourseTopic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CourseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListCourseTopics': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCourseTopics,
                    request_deserializer=courses__types__pb2.ListCourseTopicsRequest.FromString,
                    response_serializer=courses__types__pb2.ListCourseTopicsResponse.SerializeToString,
            ),
            'GetCourseTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCourseTopic,
                    request_deserializer=courses__types__pb2.GetCourseTopicRequest.FromString,
                    response_serializer=courses__types__pb2.CourseTopic.SerializeToString,
            ),
            'CreateCourseTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCourseTopic,
                    request_deserializer=courses__types__pb2.CreateCourseTopicRequest.FromString,
                    response_serializer=courses__types__pb2.CourseTopic.SerializeToString,
            ),
            'UpdateCourseTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCourseTopic,
                    request_deserializer=courses__types__pb2.UpdateCourseTopicRequest.FromString,
                    response_serializer=courses__types__pb2.CourseTopic.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CourseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CourseService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListCourseTopics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CourseService/ListCourseTopics',
            courses__types__pb2.ListCourseTopicsRequest.SerializeToString,
            courses__types__pb2.ListCourseTopicsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCourseTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CourseService/GetCourseTopic',
            courses__types__pb2.GetCourseTopicRequest.SerializeToString,
            courses__types__pb2.CourseTopic.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCourseTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CourseService/CreateCourseTopic',
            courses__types__pb2.CreateCourseTopicRequest.SerializeToString,
            courses__types__pb2.CourseTopic.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCourseTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CourseService/UpdateCourseTopic',
            courses__types__pb2.UpdateCourseTopicRequest.SerializeToString,
            courses__types__pb2.CourseTopic.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
